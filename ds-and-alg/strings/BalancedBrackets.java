package strings;

import java.util.Arrays;
import java.util.Collection;
import java.util.Map;
import java.util.Set;
import java.util.Stack;

public class BalancedBrackets {
    
    private static Stack<Character> track;
    private static Map<Character, Character> matches = Map.of(
        '{', '}',
        '[', ']',
        '(', ')'
    );
    public static boolean isMatch(char curr, char found){
        char expected = matches.get(curr);
        return expected == found;
    }
    /*
     * Complete the 'isBalanced' function below.
     *
     * The function is expected to return a STRING.
     * The function accepts STRING s as parameter.
     */

    public static String isBalanced(String s) {
        track = new Stack<Character>();
        Set<Character> open = matches.keySet();
        Collection<Character> closed = matches.values(); 
        
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (open.contains(c)){
                track.push(c);
            }
            else if (closed.contains(c)){
                if (track.isEmpty()) { return "NO"; }
                char expectedToMatch = track.pop();
                if (!BalancedBrackets.isMatch(expectedToMatch, c)){
                    return "NO";
                }
            }
        }
        if (!track.isEmpty()) { return "NO"; }
        return "YES";

    }

    /**
     * assumes same number of sorted brackets in string 
     * @param s
     * @return
     */
    public static String isBalancedNaive(String s) {
        int l = 0;
        int r = s.length() -1;

        while( l < r) {
            if (!BalancedBrackets.isMatch(s.charAt(l), s.charAt(r))) {
                return "NO";
            }

            l++;
            r--;
        }
        return "YES";
    
    }


    public static void main(String args[]) {
        
        String[] tests = {"[()][{}()][](){}([{}(())([[{}]])][])[]([][])(){}{{}{[](){}}}()[]({})[{}{{}([{}][])}]",
        "[()][{}[{}[{}]]][]{}[]{}[]{{}({}(){({{}{}[([[]][[]])()]})({}{{}})})}",
        "(])[{{{][)[)])(]){(}))[{(})][[{)(}){[(]})[[{}(])}({)(}[[()}{}}]{}{}}()}{({}](]{{[}}(([{]",
        "){[]()})}}]{}[}}})}{]{](]](()][{))])(}]}))(}[}{{)}{[[}[]",
        "}(]}){",
        "((]()(]([({]}({[)){}}[}({[{])(]{()[]}}{)}}]]{({)[}{(",
        "{}{({{}})}[][{{}}]{}{}(){{}[]}{}([[][{}]]())",
        "(){}[()[][]]{}(())()[[([])][()]{}{}(({}[]()))()[()[{()}]][]]",
        "()([]({}[]){}){}{()}[]{}[]()(()([[]]()))()()()[]()(){{}}()({[{}][]}[[{{}({({({})})})}]])",
        "[]([{][][)(])}()([}[}(})}])}))]](}{}})[]({{}}))[])(}}[[{]{}]()[(][])}({]{}[[))[[}[}{(]})()){{(]]){][",
        "{()({}[[{}]]()(){[{{}{[[{}]{}((({[]}{}()[])))]((()()))}(()[[[]]])((()[[](({([])()}))[]]))}]})}",
        "()(){{}}[()()]{}{}",
        "{}()([[]])({}){({[][[][[()]]{{}[[]()]}]})}[](())((())[{{}}])",
        "{}(((){}){[]{{()()}}()})[]{{()}{(){()(){}}}}{()}({()(()({}{}()((()((([])){[][{()}{}]})))))})",
        "][[{)())))}[)}}}}[{){}()]([][]){{{{{[)}]]{([{)()][({}[){]({{",
        "{{}(",
        "{[{((({}{({({()})()})[]({()[[][][]]}){}}))){}}]}{}{({((){{}[][]{}[][]{}}[{}])(())}[][])}",
        "()[[][()[]][]()](([[[(){()[[]](([]))}]]]))",
        "()[]({}{})(()){{{}}()()}({[]()}())[](){}(({()}[{}[{({{}}){({}){({})((({()})))}}}]]))",
        "}[{){({}({)})]([}{[}}{[(([])[(}){[]])([]]}(]]]]{][",
        "[{]{[{(){[}{}(([(]}])(){[[}(]){(})))}}{{)}}{}][({(}))]}({)",
        ")})[(]{][[())]{[]{{}}[)[)}[]){}](}({](}}}[}{({()]]",
        "[[[({[]}({[][[[[][[{(()[][])}()[][]][]{}]]]]}))][(()){}]]]()[{}([]{}){}{{}}]",
        "({[]({[]})}())[][{}[{{(({{{([{}])}}}))}}]]",
        "([((()))()])[][][]{}()(([]))[]()[]((){}[]){}(){{}[]}[[{[]}]]",
        "[[(((({}{[]{}()}){}{{}}){({[]{[{}]{(){}(((){()}))}()}}[[]]()()[()])[[{}{}]()]}))]]{}[]{}({({{}})})",
        "(]{()}((",
        "[][(())[({{{()[]}}{[[][[][[[]{{{[()]{{{{}{[]}[][]}}}}}}]]]]}})]]",
        "}[})})}[)]{}{)",
        "({(}{})))}(}[)[}{)}}[)[{][{(}{{}]({}{[(})[{[({{[}{(]]})}",
        "]}})[]))]{][])[}(])]({[]}[]([)",
        "[{{}{[{{[}[[}([]",
        "[([]){}][({})({[(([])[][])][[{}{([{{}{(()){{{({}{{}}())}}[]}}()[()[{{{([](()){[[[]]]})}}}]]}])}]]})]",
        "]{}{(}))}](})[{]]()(]([}]([}][}{]{[])}{{{]([][()){{})[{({{{[}{}](]}}",
        "{[{}}){(}[][)(}[}][)({[[{]}[(()[}}){}{)([)]}(()))]{)(}}}][",
        "(]{}{(}}}[)[",
        "[]{}{[[]]}([{}]{}[]){{(())}}",
        "[)([{(][(){)[)}{)]]}}([((][[}}(]{}]]}]][(({{{))[[){}{]][))[]{]][)[{{}{()]){)])))){{{[(]}[}}{}]",
        "{({(){[[[][]{}[[([]{})]{}]][[]()()]]}})}[{}{{}}]",
        ")}][(})){))[{}[}",
        "{[]{({]}[}}[{([([)([){{}{(}}[]}}[[{[}[[()(])[}[]",
        "()()()[]",
        "((){}])][]][}{]{)]]}][{]}[)(])[}[({(",
        ")[((])(]]]]((]){{{{())]}]}(}{([}(({}]])[[{){[}]{{}})[){(",
        "}][[{[((}{[]){}}[[[)({[)}]]}(]]{[)[]}{}(){}}][{()]))})]][(((}}",
        "([]){}{{}{}}()([([{}{[[]()([(([]()))()[[]]])]}])])",
        "[()[[]{{[]}()([])}[]][][]][]()[]{}{}[][]{}{}[()(){}]",
        "{[{){]({(((({](]{([])([{{([])[}(){(]](]{[{[]}}())[){})}))[{})))[",
        "{}[()[]][]{}{}[[{{[[({})]()[[()]]]}}]]",
        "{[{}[][]]}[((()))][]({})[]{}{()}",
        "(){[{({})}]}",
        "([]])][{)]({)[]))}]())[}]))][}{(}}})){]}]{[)}(][})[[",
        "((({{}(([{}(())]))[()]{[[[]()]]}})))",
        "}()))}(}]]{{})}][{](]][{]{[[]]]}]]}([)({([))[[(]}])}[}(([{)[)]]([[](]}]}{]{{})[]){]}{])(",
        "{}{}{}{[[()]][]}",
        ")]}]({{})[[[{]{{{}}][))]{{",
        "))){({}])}])}}]{)()(}(]}([",
        "([[]][])[[]()][]()(([[]]{[()[]{[][{}]}[()]]{}{[]}}{{}()}(()[([][]{})[[{}][]]{}[]])))",
        "(]{[({}[){)))}]{[{}][({[({[]))}[}]}{()(([]{]()}})}[]{[)](((]]])([]}}]){)(([]]}[[}[",
        "([[]])({}(([(){{}[{}]}]){[{}]}))[][{}{}](){}",
        "[][][][][][([])][]{({()}[[()()]{([(){[]{}}{(())}{[](){}()({}())}[({}[[]()])][]])}])}",
        "}[{{(}})}}(((())()({]{([]((][(({)[({[]]}[])}]{][{{}]{)][}(])}}}))}}}",
        "[]({})()[]{}{}[]({}{})[]{([])()[()][{()({})[{}{[[()]{}[]][]}(({{[]{()()()}{}[]()}[]}){{}{}})]}]}",
        "{{(([{)]{}({][{](){({([[[][)}[)})(",
        "[{}]{[()({[{}]})]}",
        "[[{}]]",
        "]{{({[{]}[[)]]}{}))}{){({]]}{]([)({{[]){)]{}){){}()})(]]{{])(])[]}][[()()}",
        "{[([}[[{{(]]][}()())]{){(){)]]){})}]{][][(}[]())[}[)})})[][{[)[})()][]))}[[}",
        "]()])}[}}}{]]{)[}(}]]])])}{(}{([{]({)]}])(})[{}[)]])]}[]{{)){}{()}]}((}}{({])[}])[]}",
        "(]}[{}{{][}))){{{([)([[])([]{[",
        "{(()[]){}}(){[]}({{}(()())})([]){}{}(())()[()]{}()",
        "{{}[{}[{}[]]]}{}({{[]}})[[(){}][]]{}(([]{[][]()()}{{{()()}{[]}({}[]{()})}{()}[[]][()]}))",
        "{[][]}[{}[](){}]{{}{[][{}]}}",
        "()(){}(){((){}[])([[]]())}",
        "{}[[{[((}[(}[[]{{]([(}]][[",
        "{}[([{[{{}()}]{}}([[{}[]]({}{{()}[][][]})])])]",
        "{[](}([)(])[]]})()]){[({]}{{{)({}(][{{[}}(]{",
        "[][]{{}[](())}{}({[()]}())[][[][({}([{}]))]]",
        "((()))[]{[(()({[()({[]}{})]}))]}{[]}{{({}{})[{}{}]{()([()])[{()}()[[]{}()]{}{}[]()]}[[]{[]}([])]}}"
        };
        
        System.out.println(tests.length);
        /*for(String test: tests) {
            System.out.println(BalancedBrackets.isBalanced(test));
        }*/

        System.out.println(BalancedBrackets.isBalanced("{{[[(())]]}}"));

    }
}
